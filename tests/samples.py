import numpy as np


CHUNKSIZE = [4, 4]

OVERLAPS = [1, 1]

THRESHOLD = 0.25

INPUT_IMG = np.array([
    [0, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0],
    [0, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255],
    [0, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255],
    [0, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0],
    [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255],
    [0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 255, 255],
    [255, 255, 0, 255, 255, 0, 0, 255, 255, 0, 0, 0],
    [255, 255, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 255, 255],
    [0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 255, 255]
], dtype=np.uint8)

OUTPUT_LBL = np.array([
    [0, 0, 1, 1, 0, 3, 3, 0, 5, 5, 0, 0],
    [0, 0, 1, 1, 0, 3, 3, 0, 5, 5, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6],
    [0, 0, 2, 2, 0, 4, 4, 0, 7, 7, 0, 6],
    [0, 0, 2, 2, 0, 4, 4, 0, 7, 7, 0, 0],
    [8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9],
    [0, 0, 0, 0, 0, 0, 0, 12, 12, 0, 9, 9],
    [10, 10, 0, 11, 11, 0, 0, 12, 12, 0, 0, 0],
    [10, 10, 0, 11, 11, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 14, 14],
    [0, 0, 0, 0, 0, 0, 0, 13, 13, 0, 14, 14]
], dtype=np.int32)

ANNOTATIONS_OUTPUT = [
    [
        [
            {
                "geometry": {
                    "coordinates": [[[2, 0], [2, 1], [3, 1], [3, 0], [2, 0]]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            },
            {
                "geometry": {
                    "coordinates": [[[2, 3], [2, 4], [3, 4], [3, 3], [2, 3]]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            },
        ],
        [
            {
                "geometry": {
                    "coordinates": [[[5, 0], [5, 1], [6, 1], [6, 0], [5, 0]]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"},
            {
                "geometry": {
                    "coordinates": [[[5, 3], [5, 4], [6, 4], [6, 3], [5, 3]]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            },
        ],
        [
            {
                "geometry": {
                    "coordinates": [[[11, 2], [11, 3], [11, 2]]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            },
            {
                "geometry": {
                    "coordinates": [[[8, 3], [8, 4], [9, 4], [9, 3], [8, 3]]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            },
            {
                "geometry": {
                    "coordinates": [[[8, 0], [8, 1], [9, 1], [9, 0], [8, 0]]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            },
        ],
    ],
    [
        [
            {
                "geometry": {
                    "coordinates": [[[0, 5], [0, 6], [1, 6], [0, 5]]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            },
        ],
        [],
        [
            {
                "geometry": {
                    "coordinates": [[
                        [10, 6], [10, 7], [11, 7], [11, 6], [10, 6]
                        ]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            }
        ],
    ],
    [
        [
            {
                "geometry": {
                    "coordinates": [[[0, 8], [0, 9], [1, 9], [1, 8], [0, 8]]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            },
            {
                "geometry": {
                    "coordinates": [[[3, 8], [3, 9], [4, 9], [4, 8], [3, 8]]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            },
        ],
        [],
        [
            {
                "geometry": {
                    "coordinates": [[[7, 7], [7, 8], [8, 8], [8, 7], [7, 7]]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            },
            {
                "geometry": {
                    "coordinates": [[
                        [7, 10], [7, 11], [8, 11], [8, 10], [7, 10]
                        ]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            },
            {
                "geometry": {
                    "coordinates": [[
                        [10, 10], [10, 11], [11, 11], [11, 10], [10, 10]
                        ]],
                    "type": "Polygon"
                },
                "properties": {
                    "objectType": "cell"
                },
                "type": "Feature"
            }
        ]
    ]
]

FEATRUES_RES = [
    [
        np.array([
            [
                {
                    "detections": [
                        ["cell", [[2, 0], [2, 1], [3, 1], [3, 0], [2, 0]]],
                        ["cell", [[2, 3], [2, 4], [3, 4], [3, 3], [2, 3]]]
                    ]
                }
            ]
        ], dtype=object),
        np.array([
            [
                {
                    "detections": [
                        ["cell", [[5, 0], [5, 1], [6, 1], [6, 0], [5, 0]]],
                        ["cell", [[5, 3], [5, 4], [6, 4], [6, 3], [5, 3]]]
                    ]
                }
            ]
        ], dtype=object),
        np.array([
            [
                {
                    "detections": [
                        ["cell", [[11, 2], [11, 3], [11, 2]]],
                        ["cell", [[8, 3], [8, 4], [9, 4], [9, 3], [8, 3]]],
                        ["cell", [[8, 0], [8, 1], [9, 1], [9, 0], [8, 0]]]
                    ]
                }
            ]
        ], dtype=object),
    ],
    [
        np.array([
            [
                {
                    "detections": [
                        ["cell", [[0, 5], [0, 6], [1, 6], [0, 5]]]
                    ]
                }
            ]
        ], dtype=object),
        np.array([
            [
                {
                    "detections": []
                }
            ]
        ], dtype=object),
        np.array([
            [
                {
                    "detections": [
                        ["cell", [[10, 6], [10, 7], [11, 7], [11, 6], [10, 6]]]
                    ]
                }
            ]
        ], dtype=object),
    ],
    [
        np.array([
            [
                {
                    "detections": [
                        ["cell", [[0, 8], [0, 9], [1, 9], [1, 8], [0, 8]]],
                        ["cell", [[3, 8], [3, 9], [4, 9], [4, 8], [3, 8]]]
                    ]
                }
            ]
        ], dtype=object),
        np.array([
            [
                {
                    "detections": []
                 }
            ]
        ], dtype=object),
        np.array([
            [
                {
                    "detections": [
                        ["cell", [[7, 7], [7, 8], [8, 8], [8, 7], [7, 7]]],
                        ["cell", [[7, 10], [7, 11], [8, 11], [8, 10], [7, 10]]
                         ],
                        ["cell", [
                                [10, 10], [10, 11], [11, 11], [11, 10],
                                [10, 10]
                            ]
                         ]
                    ]
                }
            ]
        ], dtype=object)
    ]
]

BLOCK_INFOS = [
    {0: {"array-location": [(0, 4), (0, 4)]},
     None: {"chunk-location": (0, 0), "num-chunks": (3, 3)}},
    {0: {"array-location": [(0, 4), (4, 8)]},
     None: {"chunk-location": (0, 1), "num-chunks": (3, 3)}},
    {0: {"array-location": [(0, 4), (8, 12)]},
     None: {"chunk-location": (0, 2), "num-chunks": (3, 3)}},
    {0: {"array-location": [(4, 8), (0, 4)]},
     None: {"chunk-location": (1, 0), "num-chunks": (3, 3)}},
    {0: {"array-location": [(4, 8), (4, 8)]},
     None: {"chunk-location": (1, 1), "num-chunks": (3, 3)}},
    {0: {"array-location": [(4, 8), (8, 12)]},
     None: {"chunk-location": (1, 2), "num-chunks": (3, 3)}},
    {0: {"array-location": [(8, 12), (0, 4)]},
     None: {"chunk-location": (2, 0), "num-chunks": (3, 3)}},
    {0: {"array-location": [(8, 12), (4, 8)]},
     None: {"chunk-location": (2, 1), "num-chunks": (3, 3)}},
    {0: {"array-location": [(8, 12), (8, 12)]},
     None: {"chunk-location": (2, 2), "num-chunks": (3, 3)}},
]

OVERLAPPED_INPUT = [
    [
        np.array([
            [0, 0, 255, 255, 0],
            [0, 0, 255, 255, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 255, 255, 0],
            [0, 0, 255, 255, 0]
        ], dtype=np.int32),
        np.array([
            [255, 0, 255, 255, 0, 255],
            [255, 0, 255, 255, 0, 255],
            [0, 0, 0, 0, 0, 0],
            [255, 0, 255, 255, 0, 255],
            [255, 0, 255, 255, 0, 255]
        ], dtype=np.int32),
        np.array([
            [0, 255, 255, 0, 0],
            [0, 255, 255, 0, 0],
            [0, 0, 0, 0, 255],
            [0, 255, 255, 0, 255],
            [0, 255, 255, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 255, 255, 0],
            [0, 0, 255, 255, 0],
            [255, 0, 0, 0, 0],
            [255, 255, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [255, 255, 0, 255, 255]
        ], dtype=np.int32),
        np.array([
            [255, 0, 255, 255, 0, 255],
            [255, 0, 255, 255, 0, 255],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 255, 255],
            [255, 255, 0, 0, 255, 255]
        ], dtype=np.int32),
        np.array([
            [0, 255, 255, 0, 255],
            [0, 255, 255, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 255, 255],
            [255, 255, 0, 255, 255],
            [255, 255, 0, 0, 0]
        ], dtype=np.int32)
    ],
    [
        np.array([
            [0, 0, 0, 0, 0],
            [255, 255, 0, 255, 255],
            [255, 255, 0, 255, 255],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 255, 255],
            [255, 255, 0, 0, 255, 255],
            [255, 255, 0, 0, 0, 0],
            [0, 0, 0, 0, 255, 255],
            [0, 0, 0, 0, 255, 255]
        ], dtype=np.int32),
        np.array([
            [255, 255, 0, 255, 255],
            [255, 255, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [255, 255, 0, 255, 255],
            [255, 255, 0, 255, 255]
        ], dtype=np.int32)
    ]
]

SEGMENTATION_RES = [
    [
        np.array([
            [0, 0, 1, 1, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 2, 2, 0],
            [0, 0, 2, 2, 0]
        ], dtype=np.int32),
        np.array([
            [1, 0, 2, 2, 0, 3],
            [1, 0, 2, 2, 0, 3],
            [0, 0, 0, 0, 0, 0],
            [4, 0, 5, 5, 0, 6],
            [4, 0, 5, 5, 0, 6]
        ], dtype=np.int32),
        np.array([
            [0, 1, 1, 0, 0],
            [0, 1, 1, 0, 0],
            [0, 0, 0, 0, 2],
            [0, 3, 3, 0, 2],
            [0, 3, 3, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 1, 1, 0],
            [0, 0, 1, 1, 0],
            [2, 0, 0, 0, 0],
            [2, 2, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [3, 3, 0, 4, 4]
        ], dtype=np.int32),
        np.array([
            [1, 0, 2, 2, 0, 3],
            [1, 0, 2, 2, 0, 3],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 4, 4],
            [5, 5, 0, 0, 4, 4]
        ], dtype=np.int32),
        np.array([
            [0, 1, 1, 0, 2],
            [0, 1, 1, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 3, 3],
            [4, 4, 0, 3, 3],
            [4, 4, 0, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 0, 0, 0],
            [1, 1, 0, 2, 2],
            [1, 1, 0, 2, 2],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 1, 1],
            [2, 2, 0, 0, 1, 1],
            [2, 2, 0, 0, 0, 0],
            [0, 0, 0, 0, 3, 3],
            [0, 0, 0, 0, 3, 3]
        ], dtype=np.int32),
        np.array([
            [1, 1, 0, 2, 2],
            [1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [3, 3, 0, 4, 4],
            [3, 3, 0, 4, 4]
        ], dtype=np.int32),
    ]
]


REMOVAL_RES = [
    [
        np.array([
            [0, 0, 1, 1, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 2, 2, 0],
            [0, 0, 2, 2, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 2, 2, 0, 0],
            [0, 0, 2, 2, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 5, 5, 0, 0],
            [0, 0, 5, 5, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 1, 1, 0, 0],
            [0, 1, 1, 0, 0],
            [0, 0, 0, 0, 2],
            [0, 3, 3, 0, 2],
            [0, 3, 3, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [2, 0, 0, 0, 0],
            [2, 2, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 3, 3],
            [0, 0, 0, 3, 3],
            [0, 0, 0, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 0, 0, 0],
            [1, 1, 0, 2, 2],
            [1, 1, 0, 2, 2],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [1, 1, 0, 0, 0],
            [1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [3, 3, 0, 4, 4],
            [3, 3, 0, 4, 4]
        ], dtype=np.int32),
    ]
]


LOCAL_SORT_RES = [
    [
        np.array([
            [0, 0, 1, 1, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 2, 2, 0],
            [0, 0, 2, 2, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 1, 1, 0, 0],
            [0, 0, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 2, 2, 0, 0],
            [0, 0, 2, 2, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 1, 1, 0, 0],
            [0, 1, 1, 0, 0],
            [0, 0, 0, 0, 2],
            [0, 3, 3, 0, 2],
            [0, 3, 3, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [1, 0, 0, 0, 0],
            [1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 1, 1],
            [0, 0, 0, 1, 1],
            [0, 0, 0, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 0, 0, 0],
            [1, 1, 0, 2, 2],
            [1, 1, 0, 2, 2],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [1, 1, 0, 0, 0],
            [1, 1, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [2, 2, 0, 3, 3],
            [2, 2, 0, 3, 3]
        ], dtype=np.int32),
    ]
]


GLOBAL_SORT_RES = [
    [
        np.array([
            [0, 0, 1, 1, 0],
            [0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 2, 2, 0],
            [0, 0, 2, 2, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 3, 3, 0, 0],
            [0, 0, 3, 3, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 4, 4, 0, 0],
            [0, 0, 4, 4, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 5, 5, 0, 0],
            [0, 5, 5, 0, 0],
            [0, 0, 0, 0, 6],
            [0, 7, 7, 0, 6],
            [0, 7, 7, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [8, 0, 0, 0, 0],
            [8, 8, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 9, 9],
            [0, 0, 0, 9, 9],
            [0, 0, 0, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 0, 0, 0],
            [10, 10, 0, 11, 11],
            [10, 10, 0, 11, 11],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [12, 12, 0, 0, 0],
            [12, 12, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [13, 13, 0, 14, 14],
            [13, 13, 0, 14, 14]
        ], dtype=np.int32),
    ]
]


GLOBAL_SORT_RES_OVERLAP = [
    [
        np.array([
            [0, 0, 1, 1, 0, 0],
            [0, 0, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 2, 2, 0, 0],
            [0, 0, 2, 2, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 3, 3, 0, 0, 0],
            [0, 0, 0, 3, 3, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 4, 4, 0, 0, 0],
            [0, 0, 0, 4, 4, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 5, 5, 0, 0],
            [0, 0, 5, 5, 0, 0],
            [0, 0, 0, 0, 0, 6],
            [0, 0, 7, 7, 0, 6],
            [0, 0, 7, 7, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 2, 2, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [8, 0, 0, 0, 0, 0],
            [8, 8, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 4, 4, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 12]
        ], dtype=np.int32),
        np.array([
            [0, 0, 7, 7, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 9, 9],
            [0, 0, 0, 0, 9, 9],
            [0, 0, 0, 0, 0, 0],
            [0, 12, 12, 0, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [10, 10, 0, 11, 11, 0],
            [10, 10, 0, 11, 11, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 12],
            [11, 0, 0, 0, 0, 0, 0, 12],
            [11, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 13],
            [0, 0, 0, 0, 0, 0, 0, 13]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0, 0],
            [0, 12, 12, 0, 0, 0],
            [0, 12, 12, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 13, 13, 0, 14, 14],
            [0, 13, 13, 0, 14, 14]
        ], dtype=np.int32),
    ]
]


MERGED_OVERLAP_RES = [
    [
        np.array([
            [0, 0, 1, 1, 0, 0],
            [0, 0, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 2, 2, 0, 0],
            [0, 0, 2, 2, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 3, 3, 0, 0, 0],
            [0, 0, 0, 3, 3, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 4, 4, 0, 0, 0],
            [0, 0, 0, 4, 4, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 5, 5, 0, 0],
            [0, 0, 5, 5, 0, 0],
            [0, 0, 0, 0, 0, 6],
            [0, 0, 7, 7, 0, 6],
            [0, 0, 7, 7, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 2, 2, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 2, 2, 0, 0],
            [8, 0, 0, 0, 0, 0],
            [8, 8, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 4, 4, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 4, 4, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 12, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 12]
        ], dtype=np.int32),
        np.array([
            [0, 0, 7, 7, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 7, 7, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 9, 9],
            [0, 0, 12, 0, 9, 9],
            [0, 0, 0, 0, 0, 0],
            [0, 12, 12, 0, 0, 0]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [10, 10, 0, 11, 11, 0],
            [10, 10, 0, 11, 11, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 12],
            [11, 0, 11, 0, 0, 12, 0, 12],
            [11, 0, 11, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 13, 0, 13],
            [0, 0, 0, 0, 0, 13, 0, 13]
        ], dtype=np.int32),
        np.array([
            [0, 0, 0, 0, 0, 0],
            [0, 12, 12, 0, 0, 0],
            [0, 12, 12, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 13, 13, 0, 14, 14],
            [0, 13, 13, 0, 14, 14]
        ], dtype=np.int32),
    ]
]


MERGED_OVERLAP_TRIMMED_RES = [
    [
        np.array([
            [0, 0, 1, 1],
            [0, 0, 1, 1],
            [0, 0, 0, 0],
            [0, 0, 2, 2]
        ], dtype=np.int32),
        np.array([
            [0, 3, 3, 0],
            [0, 3, 3, 0],
            [0, 0, 0, 0],
            [0, 4, 4, 0]
        ], dtype=np.int32),
        np.array([
            [5, 5, 0, 0],
            [5, 5, 0, 0],
            [0, 0, 0, 6],
            [7, 7, 0, 6]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [0, 0, 2, 2],
            [8, 0, 0, 0],
            [8, 8, 0, 0],
            [0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [0, 4, 4, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 12]
        ], dtype=np.int32),
        np.array([
            [7, 7, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 9, 9],
            [12, 0, 9, 9]
        ], dtype=np.int32),
    ],
    [
        np.array([
            [10, 10, 0, 11],
            [10, 10, 0, 11],
            [0, 0, 0, 0],
            [0, 0, 0, 0]
        ], dtype=np.int32),
        np.array([
            [11, 0, 0, 12],
            [11, 0, 0, 0],
            [0, 0, 0, 13],
            [0, 0, 0, 13]
        ], dtype=np.int32),
        np.array([
            [12, 0, 0, 0],
            [0, 0, 0, 0],
            [13, 0, 14, 14],
            [13, 0, 14, 14]
        ], dtype=np.int32),
    ]
]


if __name__ == "__main__":
    import matplotlib.pyplot as plt
    import numpy as np
    import cv2
    import geojson

    input_img = np.array(INPUT_IMG, dtype=np.uint8)

    plt.subplot(1, 2, 1)
    plt.imshow(input_img)

    output_lbl = np.array(OUTPUT_LBL, dtype=np.int32)
    plt.subplot(1, 2, 2)
    plt.imshow(input_img)

    annotations = []
    for label in np.unique(output_lbl):
        if label == 0:
            continue

        mask = output_lbl == label
        (contour_coords,
         hierarchy) = cv2.findContours(mask.astype(np.uint8),
                                       mode=cv2.RETR_TREE,
                                       method=cv2.CHAIN_APPROX_NONE)

        cc = contour_coords[0][:, 0, :]
        cc_poly = geojson.Polygon([cc.tolist()])
        annotations.append(geojson.Feature(geometry=cc_poly))
        annotations[-1]["properties"] = {"objectType": "cell"}

        cc = np.concatenate((cc, cc[:1]), axis=0)
        plt.plot(cc[:, 0], cc[:, 1])

    plt.show()

    for ann in annotations:
        print(ann)
